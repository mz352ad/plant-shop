// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let plantsData = [];
let nextId = 1;

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏
const addPlantForm = document.getElementById('addPlantForm');
const plantsList = document.getElementById('plantsList');
const successMessage = document.getElementById('successMessage');
const errorMessage = document.getElementById('errorMessage');
const successText = document.getElementById('successText');
const errorText = document.getElementById('errorText');
const adminNavBtns = document.querySelectorAll('.admin-nav-btn');
const formSections = document.querySelectorAll('.form-section');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener('DOMContentLoaded', function() {
    loadPlantsFromStorage();
    setupEventListeners();
    renderPlantsList();
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
function setupEventListeners() {
    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    adminNavBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const section = btn.dataset.section;
            switchSection(section);
        });
    });

    // –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω–∏
    addPlantForm.addEventListener('submit', handleAddPlant);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —Ä–æ–∑–¥—ñ–ª–∞–º–∏
function switchSection(section) {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
    adminNavBtns.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.section === section);
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤
    formSections.forEach(formSection => {
        formSection.classList.toggle('active', formSection.id === section + 'Section');
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ—Å–ª–∏–Ω –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ
    if (section === 'list') {
        renderPlantsList();
    }
}

// –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω–∏
function handleAddPlant(e) {
    e.preventDefault();
    
    const formData = new FormData(addPlantForm);
    const plantData = {
        id: nextId++,
        name: document.getElementById('plantName').value,
        category: document.getElementById('plantCategory').value,
        categoryName: getCategoryName(document.getElementById('plantCategory').value),
        price: parseInt(document.getElementById('plantPrice').value),
        image: document.getElementById('plantImage').value || 'üåø',
        description: document.getElementById('plantDescription').value,
        care: {
            lighting: document.getElementById('careLighting').value || '–†–æ–∑—Å—ñ—è–Ω–µ —Å–≤—ñ—Ç–ª–æ',
            watering: document.getElementById('careWatering').value || '–ü–æ–º—ñ—Ä–Ω–∏–π –ø–æ–ª–∏–≤',
            temperature: document.getElementById('careTemperature').value || '18-25¬∞C',
            humidity: document.getElementById('careHumidity').value || '–°–µ—Ä–µ–¥–Ω—è'
        },
        viber: document.getElementById('contactViber').value || '+380501234567',
        telegram: document.getElementById('contactTelegram').value || '@plantshop_ua'
    };

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!plantData.name || !plantData.category || !plantData.price || !plantData.description) {
        showError('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
        return;
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω–∏
    plantsData.push(plantData);
    savePlantsToStorage();
    
    // –û—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
    addPlantForm.reset();
    
    // –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
    showSuccess(`–†–æ—Å–ª–∏–Ω—É "${plantData.name}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!`);
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É
    renderPlantsList();
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function getCategoryName(category) {
    const categories = {
        'indoor': '–ö—ñ–º–Ω–∞—Ç–Ω—ñ',
        'garden': '–°–∞–¥–æ–≤—ñ',
        'exotic': '–ï–∫–∑–æ—Ç–∏—á–Ω—ñ'
    };
    return categories[category] || '–Ü–Ω—à—ñ';
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ—Å–ª–∏–Ω
function renderPlantsList() {
    if (plantsData.length === 0) {
        plantsList.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #666;">
                <i class="fas fa-seedling" style="font-size: 3rem; margin-bottom: 20px; color: #ccc;"></i>
                <h3>–†–æ—Å–ª–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à—É —Ä–æ—Å–ª–∏–Ω—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –≤–∏—â–µ</p>
            </div>
        `;
        return;
    }

    plantsList.innerHTML = plantsData.map(plant => `
        <div class="plant-item" data-id="${plant.id}">
            <div class="plant-info">
                <div class="plant-name">${plant.name}</div>
                <div class="plant-category">${plant.categoryName} ‚Ä¢ ${plant.price} –≥—Ä–Ω</div>
            </div>
            <div class="plant-actions">
                <button class="action-btn edit-btn" onclick="editPlant(${plant.id})">
                    <i class="fas fa-edit"></i> –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                </button>
                <button class="action-btn delete-btn" onclick="deletePlant(${plant.id})">
                    <i class="fas fa-trash"></i> –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
            </div>
        </div>
    `).join('');
}

// –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω–∏
function editPlant(plantId) {
    const plant = plantsData.find(p => p.id === plantId);
    if (!plant) return;

    // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–∞–Ω–∏–º–∏ —Ä–æ—Å–ª–∏–Ω–∏
    document.getElementById('plantName').value = plant.name;
    document.getElementById('plantCategory').value = plant.category;
    document.getElementById('plantPrice').value = plant.price;
    document.getElementById('plantImage').value = plant.image;
    document.getElementById('plantDescription').value = plant.description;
    document.getElementById('careLighting').value = plant.care.lighting;
    document.getElementById('careWatering').value = plant.care.watering;
    document.getElementById('careTemperature').value = plant.care.temperature;
    document.getElementById('careHumidity').value = plant.care.humidity;
    document.getElementById('contactViber').value = plant.viber;
    document.getElementById('contactTelegram').value = plant.telegram;

    // –ó–º—ñ–Ω–∞ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    const submitBtn = document.querySelector('.submit-btn');
    submitBtn.innerHTML = '<i class="fas fa-save"></i> –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏';
    submitBtn.dataset.editId = plantId;

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ —Ñ–æ—Ä–º—É
    switchSection('add');
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ —Ñ–æ—Ä–º–∏
    document.getElementById('addSection').scrollIntoView({ behavior: 'smooth' });
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω–∏
function deletePlant(plantId) {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —Ä–æ—Å–ª–∏–Ω—É?')) {
        return;
    }

    const plantIndex = plantsData.findIndex(p => p.id === plantId);
    if (plantIndex === -1) return;

    const plantName = plantsData[plantIndex].name;
    plantsData.splice(plantIndex, 1);
    savePlantsToStorage();
    renderPlantsList();
    
    showSuccess(`–†–æ—Å–ª–∏–Ω—É "${plantName}" –≤–∏–¥–∞–ª–µ–Ω–æ`);
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω —É localStorage
function savePlantsToStorage() {
    localStorage.setItem('plantsData', JSON.stringify(plantsData));
    localStorage.setItem('nextId', nextId.toString());
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    updateMainPageData();
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω –∑ localStorage
function loadPlantsFromStorage() {
    const savedPlants = localStorage.getItem('plantsData');
    const savedNextId = localStorage.getItem('nextId');
    
    if (savedPlants) {
        plantsData = JSON.parse(savedPlants);
    }
    
    if (savedNextId) {
        nextId = parseInt(savedNextId);
    } else {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ nextId, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–æ—Å–ª–∏–Ω
        if (plantsData.length > 0) {
            nextId = Math.max(...plantsData.map(p => p.id)) + 1;
        } else {
            nextId = 1; // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        }
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
function updateMainPageData() {
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if (window.opener && !window.opener.closed) {
        window.opener.postMessage({
            type: 'PLANTS_UPDATED',
            data: plantsData
        }, '*');
    }
}

// –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
function showSuccess(message) {
    successText.textContent = message;
    successMessage.style.display = 'block';
    errorMessage.style.display = 'none';
    
    setTimeout(() => {
        successMessage.style.display = 'none';
    }, 3000);
}

// –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
function showError(message) {
    errorText.textContent = message;
    errorMessage.style.display = 'block';
    successMessage.style.display = 'none';
    
    setTimeout(() => {
        errorMessage.style.display = 'none';
    }, 3000);
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
function exportPlants() {
    const dataStr = JSON.stringify(plantsData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = 'plants-data.json';
    link.click();
    
    URL.revokeObjectURL(url);
}

// –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
function importPlants(file) {
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importedData = JSON.parse(e.target.result);
            if (Array.isArray(importedData)) {
                plantsData = importedData;
                nextId = Math.max(...plantsData.map(p => p.id), 0) + 1;
                savePlantsToStorage();
                renderPlantsList();
                showSuccess('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!');
            } else {
                showError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É');
            }
        } catch (error) {
            showError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É');
        }
    };
    reader.readAsText(file);
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –µ–∫—Å–ø–æ—Ä—Ç—É/—ñ–º–ø–æ—Ä—Ç—É
document.addEventListener('DOMContentLoaded', function() {
    const adminNav = document.querySelector('.admin-nav');
    
    // –ö–Ω–æ–ø–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É
    const exportBtn = document.createElement('button');
    exportBtn.className = 'admin-nav-btn';
    exportBtn.innerHTML = '<i class="fas fa-download"></i> –ï–∫—Å–ø–æ—Ä—Ç';
    exportBtn.onclick = exportPlants;
    adminNav.appendChild(exportBtn);
    
    // –ö–Ω–æ–ø–∫–∞ —ñ–º–ø–æ—Ä—Ç—É
    const importBtn = document.createElement('button');
    importBtn.className = 'admin-nav-btn';
    importBtn.innerHTML = '<i class="fas fa-upload"></i> –Ü–º–ø–æ—Ä—Ç';
    importBtn.onclick = () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.onchange = (e) => {
            if (e.target.files[0]) {
                importPlants(e.target.files[0]);
            }
        };
        input.click();
    };
    adminNav.appendChild(importBtn);
});

// –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
addPlantForm.addEventListener('submit', function(e) {
    const submitBtn = document.querySelector('.submit-btn');
    const editId = submitBtn.dataset.editId;
    
    if (editId) {
        e.preventDefault();
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó —Ä–æ—Å–ª–∏–Ω–∏
        const plantIndex = plantsData.findIndex(p => p.id === parseInt(editId));
        if (plantIndex === -1) return;
        
        plantsData[plantIndex] = {
            id: parseInt(editId),
            name: document.getElementById('plantName').value,
            category: document.getElementById('plantCategory').value,
            categoryName: getCategoryName(document.getElementById('plantCategory').value),
            price: parseInt(document.getElementById('plantPrice').value),
            image: document.getElementById('plantImage').value || 'üåø',
            description: document.getElementById('plantDescription').value,
            care: {
                lighting: document.getElementById('careLighting').value || '–†–æ–∑—Å—ñ—è–Ω–µ —Å–≤—ñ—Ç–ª–æ',
                watering: document.getElementById('careWatering').value || '–ü–æ–º—ñ—Ä–Ω–∏–π –ø–æ–ª–∏–≤',
                temperature: document.getElementById('careTemperature').value || '18-25¬∞C',
                humidity: document.getElementById('careHumidity').value || '–°–µ—Ä–µ–¥–Ω—è'
            },
            viber: document.getElementById('contactViber').value || '+380501234567',
            telegram: document.getElementById('contactTelegram').value || '@plantshop_ua'
        };
        
        savePlantsToStorage();
        addPlantForm.reset();
        
        // –°–∫–∏–¥–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        submitBtn.innerHTML = '<i class="fas fa-plus"></i> –î–æ–¥–∞—Ç–∏ —Ä–æ—Å–ª–∏–Ω—É';
        delete submitBtn.dataset.editId;
        
        showSuccess('–†–æ—Å–ª–∏–Ω—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
        renderPlantsList();
    }
}); 